#ifndef CPP_STRING_OVER_VECTOR_H_INCLUDED
#define CPP_STRING_OVER_VECTOR_H_INCLUDED

#include <assert.h>
#include "vector"
#include "algorithm"

namespace std
{

template<class charType>
struct CharTraits
{
	static bool  eq(const charType& _Left, const charType& _Right)
        {    // test for element equality
    	return (_Left == _Right);
        }

	static bool  lt(const charType& _Left, const charType& _Right)
        {    // test if _Left precedes _Right
    	return (_Left < _Right);
        }

	static int  compare(const charType *_First1,
    	const charType *_First2, size_t _Count)
        {    // compare [_First1, _First1 + _Count) with [_First2, ...)
    	for (; 0 < _Count; --_Count, ++_First1, ++_First2)
        	if (!eq(*_First1, *_First2))
            	return (lt(*_First1, *_First2) ? -1 : +1);
    	return (0);
        }

};

template<class charType, _STLP_DEFAULT_ALLOCATOR_SELECT(charType)>
class basic_string
{
private:
    typedef vector<charType, _Alloc> VectorType;
    VectorType data_;
    typedef basic_string<charType, _Alloc> ThisType;

public:
    typedef charType& reference;
    typedef const charType& const_reference;

    typedef typename VectorType::size_type size_type;
    typedef typename VectorType::value_type value_type;

    typedef typename VectorType::iterator iterator;
    typedef typename VectorType::const_iterator const_iterator;

private:
    static const charType* str_end( const charType* s )
    {
        while ( *s != 0 )
        {
            ++s;
        }

        return s;
    }

public:
    void swap_null_term_vector( VectorType& vec )
    {
       data_.swap(vec);
    }

    void swap(ThisType& str)
    {
       data_.swap(str.data_);
    }

    VectorType&  as_vector()
    {
       return data_;
    }

public:
    basic_string() : data_( 1, charType(0) ) {}
    basic_string( const charType* str ) : data_( str, str_end(str) + 1 ) {}

    basic_string( const charType* str, size_type count )
        : data_( str, str + count )
    {
        data_.push_back(0);
    }

    basic_string( const ThisType& str ): data_(str.data_) {}

    template<class InIt>
    basic_string( InIt first, InIt last )
        : data_( first, last )
    {
        data_.push_back(0);
    }


    iterator begin()  { return data_.begin(); }

    iterator end()
    {
       iterator end_iterator = data_.end();

       assert( data_.begin() != end_iterator );
       return --end_iterator;
    }

    const_iterator begin() const { return data_.begin(); }

    const_iterator end() const
    {
       const_iterator end_iterator = data_.end();

       assert( data_.begin() != end_iterator );
       return --end_iterator;
    }


    static const size_type npos = (size_type)-1;

    size_type size() const  { return data_.size() - 1; }

    void resize( size_type size, charType ch = charType(0) )
    {
        data_.resize( size + 1, ch );
        data_[size] = 0;
    }


    size_type capacity() const  { return data_.capacity() - 1; }
    void reserve( size_type capacity = 0 )  { data_.reserve( capacity + 1 ); }


    const charType* c_str() const  { return &data_[0]; }
    const charType* data() const  { return &data_[0]; }


    bool empty() const { return data_.size() <= 1; }

    void clear()
    {
        data_.resize(1);
        data_[0] = 0;
    }


    ThisType& assign( const ThisType& str )
    {
        data_ = str.data_;
        return *this;
    }

    template<class InIt>
    ThisType& assign( InIt first, InIt last )
    {
        data_.assign( first, last );
        data_.push_back(0);
        return *this;
    }

    ThisType& assign( const charType* str )
    {
        data_.assign( str, str_end(str) + 1 );
        return *this;
    }

    ThisType& assign( const charType* str, size_type count )
    {
        data_.assign( str, str + count );
        data_.push_back(0);
        return *this;
    }


    reference operator[]( size_type j )
    {
        return data_[j];
    }

    const_reference operator[]( size_type j ) const
    {
        return data_[j];
    }


    ThisType& append( const charType* str )
    {
        data_.pop_back();
        data_.insert( data_.end(), str, str_end(str) + 1 );
        return *this;
    }

    ThisType& append( const charType* str, size_type count )
    {
        data_.pop_back();
        data_.insert( data_.end(), str, str + count );
        data_.push_back(0);
        return *this;
    }

    ThisType& append( const ThisType& str )
    {
        data_.pop_back();
        data_.insert( data_.end(), str.data_.begin(), str.data_.end() );
        return *this;
    }

    ThisType& append( size_type count, charType ch )
    {
        data_.pop_back();
        data_.insert( data_.end(), count, ch );
        data_.push_back(0);
        return *this;
    }

    void push_back( charType ch )
    {
        data_[ data_.size() - 1 ] = ch;
        data_.push_back(0);
    }

    ThisType& operator+=( const ThisType& str )
    {
    	return append(str);
    }

    ThisType& operator+=( const charType* str )
    {
    	return append(str);
    }

    ThisType& operator+=( charType ch )
    {
        push_back(ch);
    	return *this;
    }

    int compare( const basic_string<charType> & val ) const
    {
        size_t My_size = size();
        size_t Val_size = val.size();

        size_t _Ans = 0 == My_size ? 0 : CharTraits<charType>::compare(c_str(), val.c_str(),
                                                 My_size < Val_size ? My_size : Val_size);
	return (_Ans != 0 ? (int)_Ans : My_size < Val_size ? -1 : My_size == Val_size ? 0 : +1);
    }
};

template<class charType,
	class _Alloc> inline
	basic_string<charType, _Alloc>  operator+(
    	const basic_string<charType,  _Alloc>& _Left,
    	const basic_string<charType,  _Alloc>& _Right)
    {    // return string + string
	return (basic_string<charType, _Alloc>(_Left) += _Right);
    }

template<class charType,
	class _Alloc> inline
	basic_string<charType, _Alloc>  operator+(
    	const charType *_Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // return NTCS + string
	return (basic_string<charType, _Alloc>(_Left) += _Right);
    }

template<class charType,
	class _Alloc> inline
	basic_string<charType, _Alloc>  operator+(
    	const charType _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // return character + string
	return (basic_string<charType, _Alloc>(1, _Left) += _Right);
    }

template<class charType,
	class _Alloc> inline
	basic_string<charType, _Alloc>  operator+(
    	const basic_string<charType, _Alloc>& _Left,
    	const charType *_Right)
    {    // return string + NTCS
	return (basic_string<charType, _Alloc>(_Left) += _Right);
    }

template<class charType,
	class _Alloc> inline
	basic_string<charType, _Alloc>  operator+(
    	const basic_string<charType, _Alloc>& _Left,
    	const charType _Right)
    {    // return string + character
	return (basic_string<charType, _Alloc>(_Left) += _Right);
    }

template<class charType,
	class _Alloc> inline
	bool  operator==(
    	const basic_string<charType, _Alloc>& _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test for string equality
	return (_Left.compare(_Right) == 0);
    }

template<class charType,
	class _Alloc> inline
	bool  operator==(
    	const charType * _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test for NTCS vs. string equality
	return (_Right.compare(_Left) == 0);
    }

template<class charType,
	class _Alloc> inline
	bool  operator==(
    	const basic_string<charType, _Alloc>& _Left,
    	const charType *_Right)
    {    // test for string vs. NTCS equality
	return (_Left.compare(_Right) == 0);
    }

template<class charType,
	class _Alloc> inline
	bool  operator!=(
    	const basic_string<charType, _Alloc>& _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test for string inequality
	return (!(_Left == _Right));
    }

template<class charType,
	class _Alloc> inline
	bool  operator!=(
    	const charType *_Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test for NTCS vs. string inequality
	return (!(_Left == _Right));
    }

template<class charType,
	class _Alloc> inline
	bool  operator!=(
    	const basic_string<charType, _Alloc>& _Left,
    	const charType *_Right)
    {    // test for string vs. NTCS inequality
	return (!(_Left == _Right));
    }

template<class charType,
	class _Alloc> inline
	bool  operator<(
    	const basic_string<charType, _Alloc>& _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test if string < string
	return (_Left.compare(_Right) < 0);
    }

template<class charType,
	class _Alloc> inline
	bool  operator<(
    	const charType * _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test if NTCS < string
	return (_Right.compare(_Left) > 0);
    }

template<class charType,
	class _Alloc> inline
	bool  operator<(
    	const basic_string<charType, _Alloc>& _Left,
    	const charType *_Right)
    {    // test if string < NTCS
	return (_Left.compare(_Right) < 0);
    }

template<class charType,
	class _Alloc> inline
	bool  operator>(
    	const basic_string<charType, _Alloc>& _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test if string > string
	return (_Right < _Left);
    }

template<class charType,
	class _Alloc> inline
	bool  operator>(
    	const charType * _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test if NTCS > string
	return (_Right < _Left);
    }

template<class charType,
	class _Alloc> inline
	bool  operator>(
    	const basic_string<charType, _Alloc>& _Left,
    	const charType *_Right)
    {    // test if string > NTCS
	return (_Right < _Left);
    }

template<class charType,
	class _Alloc> inline
	bool  operator<=(
    	const basic_string<charType, _Alloc>& _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test if string <= string
	return (!(_Right < _Left));
    }

template<class charType,
	class _Alloc> inline
	bool  operator<=(
    	const charType * _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test if NTCS <= string
	return (!(_Right < _Left));
    }

template<class charType,
	class _Alloc> inline
	bool  operator<=(
    	const basic_string<charType, _Alloc>& _Left,
    	const charType *_Right)
    {    // test if string <= NTCS
	return (!(_Right < _Left));
    }

template<class charType,
	class _Alloc> inline
	bool  operator>=(
    	const basic_string<charType, _Alloc>& _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test if string >= string
	return (!(_Left < _Right));
    }

template<class charType,
	class _Alloc> inline
	bool  operator>=(
    	const charType * _Left,
    	const basic_string<charType, _Alloc>& _Right)
    {    // test if NTCS >= string
	return (!(_Left < _Right));
    }

template<class charType,
	class _Alloc> inline
	bool  operator>=(
    	const basic_string<charType, _Alloc>& _Left,
    	const charType *_Right)
    {    // test if string >= NTCS
	return (!(_Left < _Right));
    }




typedef std::basic_string<char> string;
typedef std::basic_string<wchar_t> wstring;

}//namespace std

#endif
